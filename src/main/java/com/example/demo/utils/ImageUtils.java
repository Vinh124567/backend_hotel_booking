package com.example.demo.utils;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.UUID;

public class ImageUtils {

    private static final String UPLOAD_DIR = "uploads/";
    private static final String BASE_URL = "http://10.0.2.2:8084/uploads/";

    /**
     * L∆∞u base64 th√†nh file v√† tr·∫£ v·ªÅ URL ng·∫Øn
     * INPUT: base64 string (c√≥ th·ªÉ c√≥ prefix "data:image/...")
     * OUTPUT: URL ng·∫Øn ƒë·ªÉ l∆∞u v√†o database
     */
    public static String saveBase64Image(String base64) {
        if (base64 == null || base64.trim().isEmpty()) {
            throw new IllegalArgumentException("Base64 string kh√¥ng th·ªÉ null ho·∫∑c r·ªóng");
        }

        try {
            System.out.println("üîç === DEBUG saveBase64Image START ===");
            System.out.println("üîç Input length: " + base64.length());
            System.out.println("üîç Input starts with 'data:': " + base64.startsWith("data:"));
            System.out.println("üîç Input preview: " + base64.substring(0, Math.min(100, base64.length())) + "...");

            // ‚úÖ Lo·∫°i b·ªè data URL prefix n·∫øu c√≥
            String base64Data = base64;
            if (base64.contains(",")) {
                String[] parts = base64.split(",");
                if (parts.length >= 2) {
                    base64Data = parts[1];
                    System.out.println("üîç Removed data URL prefix");
                }
            }

            System.out.println("üîç Clean base64 length: " + base64Data.length());

            // ‚úÖ Validate base64
            if (base64Data.trim().isEmpty()) {
                throw new IllegalArgumentException("Base64 data r·ªóng sau khi x·ª≠ l√Ω");
            }

            // ‚úÖ Decode base64 th√†nh bytes
            byte[] imageBytes;
            try {
                imageBytes = Base64.getDecoder().decode(base64Data);
                System.out.println("üîç Decoded bytes length: " + imageBytes.length);
            } catch (IllegalArgumentException e) {
                throw new RuntimeException("Base64 kh√¥ng h·ª£p l·ªá: " + e.getMessage());
            }

            // ‚úÖ Validate file size (max 10MB)
            if (imageBytes.length > 10 * 1024 * 1024) {
                throw new RuntimeException("File qu√° l·ªõn: " + (imageBytes.length / 1024 / 1024) + "MB (max 10MB)");
            }

            if (imageBytes.length == 0) {
                throw new RuntimeException("File r·ªóng sau khi decode");
            }

            // ‚úÖ T·∫°o t√™n file unique
            String fileName = UUID.randomUUID().toString() + "_" + System.currentTimeMillis() + ".jpg";
            Path uploadPath = Paths.get(UPLOAD_DIR);
            Path filePath = uploadPath.resolve(fileName);

            System.out.println("üîç File path: " + filePath.toAbsolutePath());

            // ‚úÖ T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
            Files.createDirectories(uploadPath);

            // ‚úÖ L∆∞u file v√†o disk
            Files.write(filePath, imageBytes);

            // ‚úÖ Verify file ƒë√£ ƒë∆∞·ª£c l∆∞u
            if (!Files.exists(filePath)) {
                throw new RuntimeException("File kh√¥ng ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng: " + filePath);
            }

            long savedFileSize = Files.size(filePath);
            System.out.println("üîç File saved with size: " + savedFileSize + " bytes");

            // ‚úÖ T·∫°o URL ng·∫Øn ƒë·ªÉ tr·∫£ v·ªÅ
            String imageUrl = BASE_URL + fileName;

            System.out.println("‚úÖ File saved successfully: " + fileName);
            System.out.println("üìé URL created: " + imageUrl);
            System.out.println("üìè URL length: " + imageUrl.length() + " characters");
            System.out.println("üîç === DEBUG saveBase64Image END ===");

            // ‚úÖ QUAN TR·ªåNG: Lu√¥n tr·∫£ v·ªÅ URL ng·∫Øn, KH√îNG BAO GI·ªú tr·∫£ v·ªÅ base64
            return imageUrl;

        } catch (IOException e) {
            System.err.println("‚ùå IO Error in saveBase64Image: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Kh√¥ng th·ªÉ l∆∞u file: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("‚ùå Unexpected error in saveBase64Image: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("L·ªói x·ª≠ l√Ω ·∫£nh: " + e.getMessage());
        }
    }

    /**
     * Ki·ªÉm tra xem string c√≥ ph·∫£i l√† base64 hay URL
     */
    public static boolean isBase64(String str) {
        if (str == null || str.trim().isEmpty()) {
            return false;
        }
        return str.startsWith("data:") || (!str.startsWith("http") && str.length() > 100);
    }

    /**
     * Ki·ªÉm tra xem string c√≥ ph·∫£i l√† URL hay kh√¥ng
     */
    public static boolean isUrl(String str) {
        if (str == null || str.trim().isEmpty()) {
            return false;
        }
        return str.startsWith("http://") || str.startsWith("https://");
    }
}