// ‚úÖ PaymentRepository.java - VERSION ƒê∆†N GI·∫¢N CHO ƒê·ªí √ÅN
package com.example.demo.repository;

import com.example.demo.entity.Payment;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Repository
public interface PaymentRepository extends JpaRepository<Payment, Long> {

    // ========== EXISTING METHODS (GI·ªÆ NGUY√äN) ==========
    List<Payment> findByBookingId(Long bookingId);
    Optional<Payment> findByTransactionId(String transactionId);
    Optional<Payment> findByOrderId(String orderId);
    Optional<Payment> findByRequestId(String requestId);

    @Query("SELECT p FROM Payment p WHERE p.booking.id = :bookingId AND p.paymentStatus = :status")
    List<Payment> findByBookingIdAndStatus(@Param("bookingId") Long bookingId, @Param("status") String status);

    @Query("SELECT p FROM Payment p WHERE p.paymentStatus = 'Ch·ªù thanh to√°n' AND p.qrExpiryTime < CURRENT_TIMESTAMP")
    List<Payment> findExpiredPayments();

    @Query("SELECT COUNT(p) FROM Payment p WHERE p.booking.id = :bookingId AND p.paymentStatus = 'ƒê√£ thanh to√°n'")
    Long countPaidPaymentsByBookingId(@Param("bookingId") Long bookingId);

    @Query("SELECT COUNT(p) FROM Payment p WHERE p.paymentStatus = :paymentStatus")
    Long countByPaymentStatus(@Param("paymentStatus") String paymentStatus);

    @Query("SELECT SUM(p.amount) FROM Payment p WHERE p.paymentStatus = 'ƒê√£ thanh to√°n' AND DATE(p.paymentDate) = :date")
    Optional<BigDecimal> getTodayRevenue(@Param("date") LocalDate date);

    // ========== üÜï CH·ªà 5 METHODS M·ªöI C·∫¶N THI·∫æT ==========

    /**
     * 1. T√¨m payment theo booking v√† type
     */
    List<Payment> findByBookingIdAndPaymentType(Long bookingId, Payment.PaymentType paymentType);

    /**
     * 2. Ki·ªÉm tra booking ƒë√£ c√≥ payment th√†nh c√¥ng ch∆∞a
     */
    @Query("SELECT COUNT(p) > 0 FROM Payment p WHERE p.booking.id = :bookingId AND p.paymentStatus = 'ƒê√£ thanh to√°n'")
    boolean existsPaidPaymentByBookingId(@Param("bookingId") Long bookingId);

    /**
     * 3. T√¨m payment cu·ªëi c√πng c·ªßa booking
     */
    Payment findTopByBookingIdOrderByCreatedAtDesc(Long bookingId);

    /**
     * 4. T√≠nh t·ªïng ti·ªÅn ƒë√£ thanh to√°n c·ªßa booking
     */
    @Query("SELECT COALESCE(SUM(p.amount), 0) FROM Payment p WHERE p.booking.id = :bookingId AND p.paymentStatus = 'ƒê√£ thanh to√°n'")
    BigDecimal getTotalPaidAmountByBookingId(@Param("bookingId") Long bookingId);

    /**
     * 5. T√¨m t·∫•t c·∫£ payments c·ªßa booking theo th·ªùi gian
     */
    List<Payment> findByBookingIdOrderByCreatedAtDesc(Long bookingId);
}