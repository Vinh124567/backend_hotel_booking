package com.example.demo.service.booking;
import com.example.demo.dto.booking.BookingRequest;
import com.example.demo.dto.booking.BookingResponse;
import com.example.demo.dto.booking.BookingStatsResponse;
import com.example.demo.dto.hotel_image.HotelImageResponse;
import com.example.demo.entity.Booking;
import com.example.demo.entity.Hotel;
import com.example.demo.entity.RoomType;
import com.example.demo.entity.User;
import com.example.demo.repository.BookingRepository;
import com.example.demo.repository.RoomTypeRepository;
import com.example.demo.repository.UserRepository;
import com.example.demo.service.user.UserService;
import lombok.AllArgsConstructor;
import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.stream.Collectors;

@Service
@AllArgsConstructor
public class BookingServiceImpl implements BookingService {
    private static final Logger log = LoggerFactory.getLogger(BookingServiceImpl.class);

    private final BookingRepository bookingRepository;
    private final UserService userService; // ‚úÖ Inject UserService

    private final RoomTypeRepository roomTypeRepository;
    private final UserRepository userRepository;
    private final ModelMapper modelMapper;

    @Transactional
    @Override
    public BookingResponse createBooking(BookingRequest request) {
        log.info("üè® Creating booking for roomTypeId: {}, checkIn: {}, checkOut: {}",
                request.getRoomTypeId(), request.getCheckInDate(), request.getCheckOutDate());
        User currentUser = userService.getCurrentUser(); // ‚úÖ Use getCurrentUser()

        // 1. Validate request
        validateBookingRequest(request);

        // 2. Check room type exists
        RoomType roomType = roomTypeRepository.findById(request.getRoomTypeId())
                .orElseThrow(() -> new RuntimeException("Lo·∫°i ph√≤ng kh√¥ng t·ªìn t·∫°i v·ªõi ID: " + request.getRoomTypeId()));

        // 3. Check availability
        if (!isRoomTypeAvailable(request.getRoomTypeId(), request.getCheckInDate(), request.getCheckOutDate())) {
            throw new RuntimeException("Lo·∫°i ph√≤ng kh√¥ng kh·∫£ d·ª•ng trong th·ªùi gian ƒë√£ ch·ªçn");
        }
        // 5. Create booking entity
        Booking booking = new Booking();
        booking.setUser(currentUser);
        booking.setRoomType(roomType);
        booking.setCheckInDate(request.getCheckInDate());
        booking.setCheckOutDate(request.getCheckOutDate());
        booking.setNumberOfGuests(request.getNumberOfGuests());
        booking.setTotalPrice(BigDecimal.valueOf(request.getTotalPrice()));
        booking.setSpecialRequests(request.getSpecialRequests());
        booking.setStatus("Ch·ªù x√°c nh·∫≠n"); // Default status from entity
        // bookingDate will be set by @PrePersist

        // 6. Save booking
        booking = bookingRepository.save(booking);

        log.info("‚úÖ Booking created successfully with ID: {}", booking.getId());

        return mapToBookingResponse(booking);
    }

    @Override
    public BookingResponse cancelBooking(Long bookingId) {
        // 1. T√¨m booking theo ID
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng v·ªõi ID: " + bookingId));
        User currentUser = userService.getCurrentUser(); // ‚úÖ Use getCurrentUser()

        // 2. Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
        if (!booking.getUser().getId().equals(currentUser.getId())) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë·∫∑t ph√≤ng n√†y");
        }

        // 3. Ki·ªÉm tra tr·∫°ng th√°i c√≥ th·ªÉ h·ªßy
        validateCancellation(booking);

        // 4. C·∫≠p nh·∫≠t tr·∫°ng th√°i
        booking.setStatus("ƒê√£ h·ªßy");

        // 5. L∆∞u v√† tr·∫£ v·ªÅ
        Booking savedBooking = bookingRepository.save(booking);
        BookingResponse response = convertToBookingResponse(savedBooking);
        return response;
    }

    @Override
    public List<BookingResponse> getPendingBookings() {
        log.info("üìã Getting all pending confirmation bookings");

        // S·ª≠ d·ª•ng method c√≥ s·∫µn trong BookingRepository
        List<Booking> pendingBookings = bookingRepository.findByStatusOrderByBookingDateDesc("Ch·ªù x√°c nh·∫≠n");

        return pendingBookings.stream()
                .map(this::convertToBookingResponse)
                .toList();
    }

    @Override
    public List<BookingResponse> getCurrentUserBookings() {
        User currentUser = userService.getCurrentUser(); // ‚úÖ Use getCurrentUser()
        log.info("üìã Getting bookings for user: {}", currentUser.getUsername());

        List<Booking> bookings = bookingRepository.findByUserIdOrderByBookingDateDesc(currentUser.getId());
        return bookings.stream()
                .map(this::mapToBookingResponse)
                .toList();
    }


    @Override
    public boolean isRoomTypeAvailable(Long roomTypeId, LocalDate checkInDate, LocalDate checkOutDate) {
        log.info("üîç Checking availability for roomType: {} from {} to {}",
                roomTypeId, checkInDate, checkOutDate);

        try {
            // Check if roomType exists first
            RoomType roomType = roomTypeRepository.findById(roomTypeId)
                    .orElseThrow(() -> new RuntimeException("Lo·∫°i ph√≤ng kh√¥ng t·ªìn t·∫°i"));

            log.info("‚úÖ RoomType found: {}", roomType.getTypeName());

            // Count overlapping bookings
            long bookedRooms = bookingRepository.countOverlappingBookings(roomTypeId, checkInDate, checkOutDate);
            log.info("üìä Booked rooms: {}", bookedRooms);

            // SIMPLE FIX: Assume each room type has 5 rooms available
            long totalRooms = 5; // Fixed number for development
            boolean isAvailable = bookedRooms < totalRooms;

            log.info("üìä Result - Total: {}, Booked: {}, Available: {}",
                    totalRooms, bookedRooms, isAvailable);

            return isAvailable;

        } catch (Exception e) {
            log.error("‚ùå Availability check error: ", e);
            // For development: return true to allow booking
            log.warn("‚ö†Ô∏è DEVELOPMENT MODE: Returning true for testing");
            return true;
        }
    }

    // ========== Helper Methods ==========

    private void validateBookingRequest(BookingRequest request) {
        if (request.getCheckInDate().isAfter(request.getCheckOutDate())) {
            throw new RuntimeException("Ng√†y check-in ph·∫£i tr∆∞·ªõc ng√†y check-out");
        }

        if (request.getCheckInDate().isBefore(LocalDate.now())) {
            throw new RuntimeException("Ng√†y check-in kh√¥ng th·ªÉ l√† qu√° kh·ª©");
        }

        if (request.getNumberOfGuests() <= 0) {
            throw new RuntimeException("S·ªë l∆∞·ª£ng kh√°ch ph·∫£i l·ªõn h∆°n 0");
        }

        if (request.getTotalPrice() <= 0) {
            throw new RuntimeException("T·ªïng gi√° ph·∫£i l·ªõn h∆°n 0");
        }
    }

    private boolean canCancelBooking(Booking booking) {
        // Cannot cancel if already cancelled
        if ("ƒê√£ h·ªßy".equals(booking.getStatus())) {
            return false;
        }

        // Cannot cancel if already paid or checked in
        if ("ƒê√£ thanh to√°n".equals(booking.getStatus()) ||
                "ƒê√£ nh·∫≠n ph√≤ng".equals(booking.getStatus()) ||
                "ƒê√£ tr·∫£ ph√≤ng".equals(booking.getStatus())) {
            return false;
        }

        // Cannot cancel within 24 hours of check-in
        return booking.getCheckInDate().isAfter(LocalDate.now().plusDays(1));
    }



    @Override
    public BookingResponse getBookingById(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng v·ªõi ID: " + bookingId));

        return convertToBookingResponse(booking);
    }



    // ========== PERMISSION CALCULATION METHODS ==========

    private Boolean calculateCanCancel(Booking booking) {
        String status = booking.getStatus();

        // Kh√¥ng th·ªÉ h·ªßy n·∫øu ƒë√£ h·ªßy, ho√†n th√†nh, ho·∫∑c ƒë√£ nh·∫≠n ph√≤ng
        if ("ƒê√£ h·ªßy".equals(status) ||
                "Ho√†n th√†nh".equals(status) ||
                "ƒê√£ nh·∫≠n ph√≤ng".equals(status) ||
                "Checked In".equals(status)) {
            return false;
        }

        // Ki·ªÉm tra th·ªùi h·∫°n 24h
        LocalDate checkInDate = booking.getCheckInDate();
        LocalDate now = LocalDate.now();
        long daysUntilCheckIn = ChronoUnit.DAYS.between(now, checkInDate);

        return daysUntilCheckIn >= 1;
    }

    private Boolean calculateCanModify(Booking booking) {
        String status = booking.getStatus();

        // Kh√¥ng th·ªÉ s·ª≠a n·∫øu ƒë√£ h·ªßy, ho√†n th√†nh, ho·∫∑c ƒë√£ nh·∫≠n ph√≤ng
        if ("ƒê√£ h·ªßy".equals(status) ||
                "Ho√†n th√†nh".equals(status) ||
                "ƒê√£ nh·∫≠n ph√≤ng".equals(status) ||
                "Checked In".equals(status)) {
            return false;
        }

        // C√≥ th·ªÉ s·ª≠a trong v√≤ng 48h tr∆∞·ªõc check-in
        LocalDate checkInDate = booking.getCheckInDate();
        LocalDate now = LocalDate.now();
        long daysUntilCheckIn = ChronoUnit.DAYS.between(now, checkInDate);

        return daysUntilCheckIn >= 2;
    }

    private Boolean calculateCanCheckIn(Booking booking) {
        String status = booking.getStatus();

        // ‚úÖ Cho ph√©p check-in t·ª´ "Ch·ªù x√°c nh·∫≠n" ho·∫∑c "ƒê√£ x√°c nh·∫≠n"
        if (!"Ch·ªù x√°c nh·∫≠n".equals(status) && !"ƒê√£ x√°c nh·∫≠n".equals(status)) {
            return false;
        }

        // Ch·ªâ c√≥ th·ªÉ check-in trong ng√†y check-in ho·∫∑c sau ng√†y check-in
        LocalDate checkInDate = booking.getCheckInDate();
        LocalDate now = LocalDate.now();

        return now.equals(checkInDate) || now.isAfter(checkInDate);
    }

    private Boolean calculateCanCheckOut(Booking booking) {
        String status = booking.getStatus();

        // Ch·ªâ c√≥ th·ªÉ check-out n·∫øu ƒë√£ check-in
        if (!"ƒê√£ nh·∫≠n ph√≤ng".equals(status) && !"Checked In".equals(status)) {
            return false;
        }

        // C√≥ th·ªÉ check-out t·ª´ ng√†y check-in ƒë·∫øn ng√†y check-out
        LocalDate checkOutDate = booking.getCheckOutDate();
        LocalDate now = LocalDate.now();

        return now.isBefore(checkOutDate) || now.equals(checkOutDate);
    }

    // ========== ADDITIONAL BOOKING METHODS ==========

    @Override
    public BookingResponse checkInBooking(Long bookingId) {
        User currentUser = userService.getCurrentUser(); // ‚úÖ Option 2

        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng v·ªõi ID: " + bookingId));

        // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
        if (!booking.getUser().getId().equals(currentUser.getId())) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn check-in ƒë·∫∑t ph√≤ng n√†y");
        }

        // Validate check-in
        validateCheckIn(booking);

        // C·∫≠p nh·∫≠t status
        booking.setStatus("ƒê√£ nh·∫≠n ph√≤ng");

        Booking savedBooking = bookingRepository.save(booking);
        return convertToBookingResponse(savedBooking);
    }

    @Override
    public BookingResponse checkOutBooking(Long bookingId) {
        User currentUser = userService.getCurrentUser(); // ‚úÖ Option 2

        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng v·ªõi ID: " + bookingId));

        // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
        if (!booking.getUser().getId().equals(currentUser.getId())) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn check-out ƒë·∫∑t ph√≤ng n√†y");
        }

        // Validate check-out
        validateCheckOut(booking);

        // C·∫≠p nh·∫≠t status
        booking.setStatus("Ho√†n th√†nh");

        Booking savedBooking = bookingRepository.save(booking);
        return convertToBookingResponse(savedBooking);
    }

    @Override
    public BookingResponse updateBooking(Long bookingId, BookingRequest request) {
        User currentUser = userService.getCurrentUser(); // ‚úÖ Option 2

        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng v·ªõi ID: " + bookingId));

        // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
        if (!booking.getUser().getId().equals(currentUser.getId())) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t ƒë·∫∑t ph√≤ng n√†y");
        }

        // Validate modification
        validateModification(booking);

        // Update fields
        booking.setCheckInDate(request.getCheckInDate());
        booking.setCheckOutDate(request.getCheckOutDate());
        booking.setNumberOfGuests(request.getNumberOfGuests());
        booking.setTotalPrice(java.math.BigDecimal.valueOf(request.getTotalPrice()));
        booking.setSpecialRequests(request.getSpecialRequests());

        Booking savedBooking = bookingRepository.save(booking);
        return convertToBookingResponse(savedBooking);
    }

    @Override
    public BookingStatsResponse getUserBookingStats() {
        User currentUser = userService.getCurrentUser(); // ‚úÖ Option 2

        List<Booking> userBookings = bookingRepository.findByUserId(currentUser.getId());

        Long totalBookings = (long) userBookings.size();
        Long activeBookings = userBookings.stream()
                .filter(b -> "ƒê√£ x√°c nh·∫≠n".equals(b.getStatus()) || "ƒê√£ nh·∫≠n ph√≤ng".equals(b.getStatus()))
                .count();
        Long completedBookings = userBookings.stream()
                .filter(b -> "Ho√†n th√†nh".equals(b.getStatus()))
                .count();
        Long cancelledBookings = userBookings.stream()
                .filter(b -> "ƒê√£ h·ªßy".equals(b.getStatus()))
                .count();

        Double totalSpent = userBookings.stream()
                .filter(b -> !"ƒê√£ h·ªßy".equals(b.getStatus()))
                .mapToDouble(b -> b.getTotalPrice().doubleValue())
                .sum();

        Long favoriteHotels = (long) currentUser.getFavoriteHotels().size();

        return BookingStatsResponse.builder()
                .totalBookings(totalBookings)
                .activeBookings(activeBookings)
                .completedBookings(completedBookings)
                .cancelledBookings(cancelledBookings)
                .totalSpent(totalSpent)
                .favoriteHotels(favoriteHotels)
                .build();
    }

    @Override
    public BookingResponse confirmBooking(Long bookingId) {
        log.info("üîî Confirming booking: {}", bookingId);

        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng v·ªõi ID: " + bookingId));

        // Validate current status
        if (!"Ch·ªù x√°c nh·∫≠n".equals(booking.getStatus())) {
            throw new RuntimeException("Ch·ªâ c√≥ th·ªÉ x√°c nh·∫≠n ƒë·∫∑t ph√≤ng ·ªü tr·∫°ng th√°i 'Ch·ªù x√°c nh·∫≠n'");
        }

        // Update status
        booking.setStatus("ƒê√£ x√°c nh·∫≠n");

        Booking savedBooking = bookingRepository.save(booking);
        log.info("‚úÖ Booking confirmed successfully: {}", bookingId);

        return convertToBookingResponse(savedBooking);
    }

    private void validateCancellation(Booking booking) {
        String status = booking.getStatus();

        // ƒê√£ b·ªã h·ªßy
        if ("ƒê√£ h·ªßy".equals(status)) {
            throw new RuntimeException("ƒê·∫∑t ph√≤ng ƒë√£ b·ªã h·ªßy tr∆∞·ªõc ƒë√≥");
        }

        // ƒê√£ ho√†n th√†nh
        if ("Ho√†n th√†nh".equals(status)) {
            throw new RuntimeException("Kh√¥ng th·ªÉ h·ªßy - ƒê·∫∑t ph√≤ng ƒë√£ ho√†n th√†nh");
        }

        // ƒê√£ check-in
        if ("ƒê√£ nh·∫≠n ph√≤ng".equals(status)) {
            throw new RuntimeException("Kh√¥ng th·ªÉ h·ªßy - ƒê√£ nh·∫≠n ph√≤ng");
        }

        // Ki·ªÉm tra th·ªùi h·∫°n 24h
        LocalDate checkInDate = booking.getCheckInDate();
        LocalDate now = LocalDate.now();
        long daysUntilCheckIn = ChronoUnit.DAYS.between(now, checkInDate);

        if (daysUntilCheckIn < 1) {
            throw new RuntimeException("Kh√¥ng th·ªÉ h·ªßy - Qu√° th·ªùi h·∫°n 24 gi·ªù tr∆∞·ªõc check-in");
        }
    }

    @Scheduled(fixedRate = 60000) // Every 5 minutes
    @Transactional
    public void cleanupExpiredPendingBookings() {
        LocalDateTime cutoffTime = LocalDateTime.now().minusMinutes(1);
        List<Booking> expiredBookings = bookingRepository.findByStatusAndBookingDateBefore("Ch·ªù x√°c nh·∫≠n", cutoffTime);

        if (!expiredBookings.isEmpty()) {
            expiredBookings.forEach(booking -> booking.setStatus("ƒê√£ h·ªßy"));
            bookingRepository.saveAll(expiredBookings);
            log.info("‚úÖ Auto-cancelled {} expired bookings", expiredBookings.size());
        }
    }

    private void validateCheckIn(Booking booking) {
        String status = booking.getStatus();

        // ‚úÖ OPTION 1: Cho ph√©p check-in t·ª´ c·∫£ "Ch·ªù x√°c nh·∫≠n" v√† "ƒê√£ x√°c nh·∫≠n"
        if (!"Ch·ªù x√°c nh·∫≠n".equals(status) && !"ƒê√£ x√°c nh·∫≠n".equals(status)) {
            throw new RuntimeException("Ch·ªâ c√≥ th·ªÉ check-in ƒë·∫∑t ph√≤ng ·ªü tr·∫°ng th√°i 'Ch·ªù x√°c nh·∫≠n' ho·∫∑c 'ƒê√£ x√°c nh·∫≠n'");
        }


        LocalDate checkInDate = booking.getCheckInDate();
        LocalDate now = LocalDate.now();

        if (now.isBefore(checkInDate)) {
            throw new RuntimeException("Ch∆∞a ƒë·∫øn ng√†y check-in");
        }

        // C√≥ th·ªÉ check-in trong v√≤ng 1 ng√†y sau check-in date
        if (ChronoUnit.DAYS.between(checkInDate, now) > 1) {
            throw new RuntimeException("ƒê√£ qu√° th·ªùi gian check-in");
        }
    }


    private void validateCheckOut(Booking booking) {
        String status = booking.getStatus();

        if (!"ƒê√£ nh·∫≠n ph√≤ng".equals(status)) {
            throw new RuntimeException("Ch·ªâ c√≥ th·ªÉ check-out sau khi ƒë√£ check-in");
        }

        LocalDate checkOutDate = booking.getCheckOutDate();
        LocalDate now = LocalDate.now();

        if (now.isAfter(checkOutDate.plusDays(1))) {
            throw new RuntimeException("ƒê√£ qu√° th·ªùi gian check-out");
        }
    }

    private void validateModification(Booking booking) {
        String status = booking.getStatus();

        if ("ƒê√£ h·ªßy".equals(status) || "Ho√†n th√†nh".equals(status) || "ƒê√£ nh·∫≠n ph√≤ng".equals(status)) {
            throw new RuntimeException("Kh√¥ng th·ªÉ s·ª≠a ƒë·ªïi ƒë·∫∑t ph√≤ng ·ªü tr·∫°ng th√°i hi·ªán t·∫°i");
        }

        LocalDate checkInDate = booking.getCheckInDate();
        LocalDate now = LocalDate.now();
        long daysUntilCheckIn = ChronoUnit.DAYS.between(now, checkInDate);

        if (daysUntilCheckIn < 2) {
            throw new RuntimeException("Kh√¥ng th·ªÉ s·ª≠a ƒë·ªïi - Ph·∫£i tr∆∞·ªõc 48 gi·ªù so v·ªõi check-in");
        }
    }


    private BookingResponse convertToBookingResponse(Booking booking) {
        BookingResponse response = modelMapper.map(booking, BookingResponse.class);

        // ========== BASIC BOOKING FIELDS ==========
        response.setUserId(booking.getUser().getId());
        response.setRoomTypeId(booking.getRoomType().getId());
        response.setRoomTypeName(booking.getRoomType().getTypeName());
        response.setUserName(booking.getUser().getFullName());
        response.setUserEmail(booking.getUser().getEmail());

        if (booking.getAssignedRoom() != null) {
            response.setAssignedRoomId(booking.getAssignedRoom().getId());
            response.setRoomNumber(booking.getAssignedRoom().getRoomNumber());
        }

        // Convert BigDecimal to Double
        if (booking.getTotalPrice() != null) {
            response.setTotalPrice(booking.getTotalPrice().doubleValue());
        }

        // ========== ‚úÖ NEW: HOTEL INFORMATION FROM ROOMTYPE -> HOTEL ==========
        RoomType roomType = booking.getRoomType();
        Hotel hotel = roomType.getHotel();

        if (hotel != null) {
            // Basic hotel info
            response.setHotelId(hotel.getId());
            response.setHotelName(hotel.getHotelName());
            response.setHotelAddress(hotel.getAddress());
            response.setHotelStarRating(hotel.getStarRating());
            response.setHotelPhoneNumber(hotel.getPhoneNumber());
            response.setHotelEmail(hotel.getEmail());
            response.setHotelWebsite(hotel.getWebsite());
            response.setIsHotelActive(hotel.getIsActive());
            response.setHotelPropertyType(hotel.getPropertyType());

            // Hotel location info
            if (hotel.getLocation() != null) {
                response.setHotelLocationCity(hotel.getLocation().getCityName());
                response.setHotelLocationDistrict(hotel.getLocation().getCityName());
            }

            // Hotel rating calculation
            if (hotel.getReviews() != null && !hotel.getReviews().isEmpty()) {
                Double avgRating = hotel.getReviews().stream()
                        .mapToDouble(review -> review.getRating().doubleValue())
                        .average()
                        .orElse(0.0);
                response.setHotelAverageRating(avgRating);
                response.setHotelReviewCount(hotel.getReviews().size());
            } else {
                response.setHotelAverageRating(0.0);
                response.setHotelReviewCount(0);
            }

            // Hotel images
            if (hotel.getImages() != null && !hotel.getImages().isEmpty()) {
                List<HotelImageResponse> imageResponses = hotel.getImages().stream()
                        .map(image -> {
                            HotelImageResponse imageResponse = modelMapper.map(image, HotelImageResponse.class);
                            imageResponse.setHotelName(hotel.getHotelName()); // Set hotel name in image
                            return imageResponse;
                        })
                        .collect(Collectors.toList());
                response.setHotelImages(imageResponses);

                // Set primary image URL for easy access
                response.setPrimaryHotelImageUrl(response.getPrimaryHotelImageUrl());
            }
        }

        // ========== ‚úÖ NEW: ROOM TYPE DETAILS ==========
        response.setRoomTypeBasePrice(roomType.getBasePrice() != null ? roomType.getBasePrice().doubleValue() : null);
        response.setRoomTypeMaxOccupancy(roomType.getMaxOccupancy());
        response.setRoomTypeDescription(roomType.getDescription());
        response.setRoomTypeBedSize(roomType.getMaxOccupancy() != null ? roomType.getMaxOccupancy().doubleValue() : null);

        // Room type amenities (combine amenity names)
        if (roomType.getAmenities() != null && !roomType.getAmenities().isEmpty()) {
            String amenitiesString = roomType.getAmenities().stream()
                    .map(amenity -> amenity.getAmenityName())
                    .collect(Collectors.joining(", "));
            response.setRoomTypeAmenities(amenitiesString);
        }

        // ========== EXISTING PERMISSION CALCULATIONS ==========
        response.setCanCancel(calculateCanCancel(booking));
        response.setCanModify(calculateCanModify(booking));
        response.setCanCheckIn(calculateCanCheckIn(booking));
        response.setCanCheckOut(calculateCanCheckOut(booking));

        return response;
    }


    private BookingResponse mapToBookingResponse(Booking booking) {
        BookingResponse response = new BookingResponse();

        // ========== BASIC BOOKING FIELDS ==========
        response.setId(booking.getId());
        response.setUserId(booking.getUser().getId());
        response.setRoomTypeId(booking.getRoomType().getId());
        response.setCheckInDate(booking.getCheckInDate());
        response.setCheckOutDate(booking.getCheckOutDate());
        response.setNumberOfGuests(booking.getNumberOfGuests());
        response.setBookingDate(booking.getBookingDate());
        response.setTotalPrice(booking.getTotalPrice().doubleValue());
        response.setSpecialRequests(booking.getSpecialRequests());
        response.setStatus(booking.getStatus());

        // Room and user info
        if (booking.getAssignedRoom() != null) {
            response.setAssignedRoomId(booking.getAssignedRoom().getId());
            response.setRoomNumber(booking.getAssignedRoom().getRoomNumber());
        }

        response.setRoomTypeName(booking.getRoomType().getTypeName());
        response.setUserName(booking.getUser().getUsername());
        response.setUserEmail(booking.getUser().getEmail());

        // ========== ‚úÖ NEW: ENHANCED HOTEL INFORMATION ==========
        RoomType roomType = booking.getRoomType();
        Hotel hotel = roomType.getHotel();

        if (hotel != null) {
            // Basic hotel info
            response.setHotelId(hotel.getId());
            response.setHotelName(hotel.getHotelName());
            response.setHotelAddress(hotel.getAddress());
            response.setHotelStarRating(hotel.getStarRating());
            response.setHotelPhoneNumber(hotel.getPhoneNumber());
            response.setHotelEmail(hotel.getEmail());
            response.setHotelWebsite(hotel.getWebsite());
            response.setIsHotelActive(hotel.getIsActive());
            response.setHotelPropertyType(hotel.getPropertyType());

            // Hotel location info
            if (hotel.getLocation() != null) {
                response.setHotelLocationCity(hotel.getLocation().getCityName());
                response.setHotelLocationDistrict(hotel.getLocation().getCityName());
            }

            // Hotel rating calculation
            if (hotel.getReviews() != null && !hotel.getReviews().isEmpty()) {
                Double avgRating = hotel.getReviews().stream()
                        .mapToDouble(review -> review.getRating().doubleValue())
                        .average()
                        .orElse(0.0);
                response.setHotelAverageRating(avgRating);
                response.setHotelReviewCount(hotel.getReviews().size());
            } else {
                response.setHotelAverageRating(0.0);
                response.setHotelReviewCount(0);
            }

            // Hotel images with proper mapping
            if (hotel.getImages() != null && !hotel.getImages().isEmpty()) {
                List<HotelImageResponse> imageResponses = hotel.getImages().stream()
                        .map(image -> {
                            HotelImageResponse imageResponse = new HotelImageResponse();
                            imageResponse.setId(image.getId());
                            imageResponse.setHotelId(hotel.getId());
                            imageResponse.setImageUrl(image.getImageUrl());
                            imageResponse.setCaption(image.getCaption());
                            imageResponse.setIsPrimary(image.getIsPrimary());
                            imageResponse.setHotelName(hotel.getHotelName());
                            return imageResponse;
                        })
                        .collect(Collectors.toList());
                response.setHotelImages(imageResponses);

                // Set primary image URL for easy access
                response.setPrimaryHotelImageUrl(response.getPrimaryHotelImageUrl());
            }
        }

        // ========== ‚úÖ NEW: ROOM TYPE DETAILS ==========
        response.setRoomTypeBasePrice(roomType.getBasePrice() != null ? roomType.getBasePrice().doubleValue() : null);
        response.setRoomTypeMaxOccupancy(roomType.getMaxOccupancy());
        response.setRoomTypeDescription(roomType.getDescription());

        // Room type amenities (combine amenity names)
        if (roomType.getAmenities() != null && !roomType.getAmenities().isEmpty()) {
            String amenitiesString = roomType.getAmenities().stream()
                    .map(amenity -> amenity.getAmenityName())
                    .collect(Collectors.joining(", "));
            response.setRoomTypeAmenities(amenitiesString);
        }

        // ========== PERMISSION CALCULATIONS ==========
        response.setCanCancel(canCancelBooking(booking));
        response.setCanModify(canCancelBooking(booking)); // Same rules as cancel

        return response;
    }



}